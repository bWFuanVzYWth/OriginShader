//translation credit: discord@SSRB_Lämbō#7360
//一部分翻譯來自16/10/2021 渣翻輕拍， 若有出入以中文為準
//part of the translation comes from a random fan on 16/10/2021 should there is any discrepancy pls refer to the Chinese version

//Origin Shader Perset
//Origin Shader 预设

#define PLANET_ATMOSPHERE 0
//1 开启太空模式
//1 Space Mode ON
//0 关闭太空模式
//0 Space Mode Off

#define SAMPLING_LEVEL 3
//1 low
//2 medium
//3 high
//4 placebo

#define LIGHT_STYLE 1
//1 default
//2 cold
//3 warm

#define ALPHA_PBR_STYLE 1
//1 default

#define CLOUD_TYPE 3
//CLOUD_TYPE
//1 无云  //off
//2 方块云(快速)  //fast
//3 方块云(质量)  //fancy

#define CHUNK_ANIMATION 1
//CHUNK_ANIMATION
//区块加载动画
//chunk loading animation

//Redstone Tools
//红石能量显示

#define REDSTONE_POWER 1
//0 关闭红石能量显示
//0 switch off redstone energy display
//1 启用红石能量显示
//1 uses redstone energy display

#define LIGHT_MAP 0
//0 关闭亮度显示
//0 switch off light intensity display
//1 显示亮度分界线
//1 show border of light intensity
//2 显示亮度数值（无效）
//2 show light intensity value (not working)

#define CHUNK_BOUND 0
//0 关闭区块边界线
//0 switch off chunk border
//1 显示区块边界线
//1 show chunk border

////////////////////////////////////////////////////////////////////

//想清楚你自己在做什么，否则最好别修改以下参数
//想清楚你自己在做什么，否则最好别修改以下参数
//想清楚你自己在做什么，否则最好别修改以下参数

//Think about what you're doing, or you'd better not change the following settings
//Think about what you're doing, or you'd better not change the following settings
//Think about what you're doing, or you'd better not change the following settings

////////////////////////////////////////////////////////////////////

#define MATH_PI 3.141592653589793
#define MATH_E 2.718281828459045
#define MATH_PHI 1.618033988749895
#define MATH_Y 0.577215664901533
#define GAMMA 2.2
#define GRAY vec3(0.18, 0.18, 0.18)
#define RGB vec3(0.7000, 0.5461, 0.4358)
#define NaN 0.0

//Developer options

#define WHITEWORLD 0

#define ACHROMATOPSIA 0

#define HASH21_TYPE 1
#define HASH22_TYPE 1

#define FAST_MATH 0

#define MOBILE 1

#define TRY_MCPE_NETEASE 0

//Developer options end

//redstone tools

#define CHUNK_BOUND_COLOR_X vec4(1.0, 0.0, 0.0, 0.5)
#define CHUNK_BOUND_COLOR_Y vec4(0.0, 1.0, 0.0, 0.5)
#define CHUNK_BOUND_COLOR_Z vec4(0.0, 0.0, 1.0, 0.5)
#define CHUNK_BOUND_COLOR_O vec4(1.0, 1.0, 1.0, 0.2)
//区块边界线的颜色
//colour of chunk border

#define LIGHT_BOUND_COLOR vec4(1.0, 0.5, 0.0, 0.5)
//亮度边界线的颜色
//colour for border of light intensity

//redtone tools end

//PLANET_ATMOSPHERE

#if PLANET_ATMOSPHERE
#define ELEVATION 20.0
#else
#define ELEVATION 1.5
#endif
//物理天空默认海拔，用于大气层建模，单位为km
//The default altitude of sky mode is used for atmosphere modeling, in km

//PLANET_ATMOSPHERE END

//SAMPLING_LEVEL

#if PLANET_ATMOSPHERE && SAMPLING_LEVEL < 3
#define __SAMPLING_LEVEL 3
#else
#define __SAMPLING_LEVEL SAMPLING_LEVEL
#endif

#if __SAMPLING_LEVEL == 1
#define FAST_OPTICAL_DEPTH 1
#define SAMNUM 2.0
#define MARNUM 4.0
#define CLOINTNUM  8.0
#define CLOSAMNUM  2.0
#define CLOMARNUM  4.0
#define FAST_SOFTSHADOW 1
#define FAST_BSDF 1
#define FAST_PERLIN 1
#define FAST_VALUE 1
#define FAST_VORO 1

#elif __SAMPLING_LEVEL == 2
#define FAST_OPTICAL_DEPTH 1
#define SAMNUM 3.0
#define MARNUM 6.0
#define CLOINTNUM  12.0
#define CLOSAMNUM  3.0
#define CLOMARNUM  6.0
#define FAST_SOFTSHADOW 1
#define FAST_BSDF 0
#define FAST_PERLIN 1
#define FAST_VALUE 1
#define FAST_VORO 0

#elif __SAMPLING_LEVEL == 3
#define FAST_OPTICAL_DEPTH 1
#define SAMNUM 4.0
#define MARNUM 8.0
#define CLOINTNUM  16.0
#define CLOSAMNUM  4.0
#define CLOMARNUM  8.0
#define FAST_SOFTSHADOW 1
#define FAST_BSDF 0
#define FAST_PERLIN 0
#define FAST_VALUE 0
#define FAST_VORO 0

#elif __SAMPLING_LEVEL == 4
#define FAST_OPTICAL_DEPTH 1
#define SAMNUM 8.0
#define MARNUM 16.0
#define CLOINTNUM  32.0
#define CLOSAMNUM  8.0
#define CLOMARNUM  16.0
#define FAST_SOFTSHADOW 0
#define FAST_BSDF 0
#define FAST_PERLIN 0
#define FAST_VALUE 0
#define FAST_VORO 0

#endif

//SAMNUM
//物理天空中阳光方向的采样数
//Sampling number of sunlight direction in sky mode

//MARNUM
//物理天空中视线方向的基础采样数
//The number of basic samples in line of sight direction in sky mode.

//CLOINTNUM
//果冻云形状，体素求交次数
//Jelly cloud shape, number of voxel intersection

//CLOSAMNUM
//果冻云光照，体素求交次数
//Jelly cloud illumination, number of voxel intersection

//CLOMARNUM
//果冻云渲染的采样数
//The number of samples for jelly cloud rendering

//FAST_SOFTSHADOW
//更快的软阴影
//faster but slightly shortcoming soft shadow

//FAST_BSDF
//更快但效果略差的BRDF
//faster but slightly shortcoming BRDF

//FAST_PERLIN
//仅使用一阶导平滑的perlin noise
//only use Perlin noise smoothed by first derivative

//FAST_VALUE
//仅使用一阶导平滑的的value noise
//only use value noise smoothed by first derivative

//FAST_VORO
//仅使用四晶格采样的voronoi noise
//only use Voronoi noise sampling from four dimensional lattice

//SAMPLING_LEVEL END

//LIGHT_STYLE

#define __LIGHT_STYLE LIGHT_STYLE

#if __LIGHT_STYLE == 1
#define SUNCOL vec3(1.0000, 1.0000, 1.0000)
#define SUNLIGHT_A 12.0
#define MOOCOL vec3(1.0000, 1.0000, 1.0000)
#define MOOLIGHT_A 0.2
#define POICOL vec3(1.0000, 0.5155, 0.2087)
#define POILIGHT_A 3.0
#define ENVCOL vec3(1.0000, 1.0000, 1.0000)
#define ENVLIGHT_A 0.02
#define LATITUDE 0.2618
#define SUN_R 0.009512
#define SOFTSHADOW 3.0
#define TONEMAP 2
#define LUM 1.0
#define FOG_A 16.0
#define O3 (0.010 * vec3(3.426, 8.298, 0.356) * 0.06)
#define LR (0.010 * vec3(0.580, 1.350, 3.310))
#define LM (0.010 * vec3(2.000, 2.000, 2.000))
#define USE_WATER_TEXTURE 0
#define WATER_TYPE 2
#define MILKY_WAY_LIGHT 1.0
#define MILKY_WAY_DEC_X 0.65
#define MILKY_WAY_DEC_Y 0.65
#define MILKY_WAY_DEC_Z 0.65
#define PM_AIR vec4(0.5, 0.25, 0.15, 0.1)
#define G_AIR vec4(0.0, 0.5, 0.8, 0.95)
#define PM_FOG vec4(0.5, 0.25, 0.15, 0.1)
#define G_FOG vec4(0.0, 0.5, 0.8, 0.95)
#define RO (LR + O3)
#define HR 8.0
#define HM 1.2
#define EARTH_R 6371.0
#define EARTH_r (EARTH_R - 0.5)
#define SUN_RISE_Y (-0.04)
#define EARTH_SHADOW 1

#elif __LIGHT_STYLE == 2
#define SUNCOL vec3(1.0000, 1.0000, 1.0000)
#define SUNLIGHT_A 12.0
#define MOOCOL vec3(1.0000, 1.0000, 1.0000)
#define MOOLIGHT_A 0.2
#define POICOL vec3(1.0000, 1.0000, 1.0000)
#define POILIGHT_A 3.0
#define ENVCOL vec3(1.0000, 1.0000, 1.0000)
#define ENVLIGHT_A 0.02
#define LATITUDE 0.2618
#define SUN_R 0.009512
#define SOFTSHADOW 3.0
#define TONEMAP 1
#define LUM 1.0
#define FOG_A 16.0
#define O3 (0.010 * vec3(3.426, 8.298, 0.356) * 0.06)
#define LR (0.005 * vec3(0.580, 1.350, 3.310))
#define LM (0.005 * vec3(2.000, 2.000, 2.000))
#define USE_WATER_TEXTURE 0
#define WATER_TYPE 2
#define MILKY_WAY_LIGHT 1.0
#define MILKY_WAY_DEC_X 0.65
#define MILKY_WAY_DEC_Y 0.65
#define MILKY_WAY_DEC_Z 0.65
#define PM_AIR vec4(0.5, 0.25, 0.15, 0.1)
#define G_AIR vec4(0.0, 0.5, 0.8, 0.95)
#define PM_FOG vec4(0.5, 0.25, 0.15, 0.1)
#define G_FOG vec4(0.0, 0.5, 0.8, 0.95)
#define RO (LR + O3)
#define HR 8.0
#define HM 1.2
#define EARTH_R 6371.0
#define EARTH_r (EARTH_R - 0.5)
#define SUN_RISE_Y (-0.04)
#define EARTH_SHADOW 1

#elif __LIGHT_STYLE == 3
#define SUNCOL vec3(1.0000, 1.0000, 1.0000)
#define SUNLIGHT_A 12.0
#define MOOCOL vec3(1.0000, 1.0000, 1.0000)
#define MOOLIGHT_A 0.2
#define POICOL vec3(1.0000, 0.3814, 0.0588)
#define POILIGHT_A 3.0
#define ENVCOL vec3(1.0000, 1.0000, 1.0000)
#define ENVLIGHT_A 0.02
#define LATITUDE 0.2618
#define SUN_R 0.009512
#define SOFTSHADOW 3.0
#define TONEMAP 2
#define LUM 1.0
#define FOG_A 16.0
#define O3 (0.010 * vec3(3.426, 8.298, 0.356) * 0.06)
#define LR (0.015 * vec3(0.580, 1.350, 3.310))
#define LM (0.015 * vec3(2.000, 2.000, 2.000))
#define USE_WATER_TEXTURE 0
#define WATER_TYPE 2
#define MILKY_WAY_LIGHT 1.0
#define MILKY_WAY_DEC_X 0.65
#define MILKY_WAY_DEC_Y 0.65
#define MILKY_WAY_DEC_Z 0.65
#define PM_AIR vec4(0.5, 0.25, 0.15, 0.1)
#define G_AIR vec4(0.0, 0.5, 0.8, 0.95)
#define PM_FOG vec4(0.5, 0.25, 0.15, 0.1)
#define G_FOG vec4(0.0, 0.5, 0.8, 0.95)
#define RO (LR + O3)
#define HR 8.0
#define HM 1.2
#define EARTH_R 6371.0
#define EARTH_r (EARTH_R - 0.5)
#define SUN_RISE_Y (-0.04)
#define EARTH_SHADOW 1

#endif

//R G B 太空中阳光的颜色
//R G B Color of sunlight in space
//A 阳光的亮度
//A Luminance of the sunlight

//R G B 太空中月光的颜色
//R G B Color of moonlight in space
//A 月光的亮度
//A Luminance of the moonlight

//R G B 灯光的颜色
//R G B Color of lamplight
//A 灯光的亮度
//A Luminance of the lamplight

//R G B 环境光颜色
//R G B Color of environment light
//A 环境光强度
//A Luminance of the environment light

//LATITUDE
//15 deg

//SUN_R
//太阳的半径，单位为弧度
//The radius of the sun, in radians

//SOFTSHADOW
//软阴影宽度
//soft shadow width

//TONEMAP
//0 None
//1 ACES
//2 AgX

//LUM
//全局亮度
//Global brightness

//FOG_A
//能见度，数值越大雾越淡
//visibility, greater the value less the foggy

//O3
//臭氧浓度
//Ozone

//LR
//瑞利散射强度
//Rayleigh scattering

//LM
//米散射强度
//Mie scattering

//USE_WATER_TEXTURE
//使用原版水面材质
//Use vanilla water surface material

//WATER_TYPE
//1 静水    //still
//2 小波浪  //small waves

//MILKY_WAY_LIGHT
//银河亮度
//luminance of the milky way

//MILKY_WAY_DEC_X
//MILKY_WAY_DEC_Y
//MILKY_WAY_DEC_Z
//银河旋转角，改变月亮和银河的相对位置，随便填
//angle of rotation for milky way, changes relative position between the Moon and the milky way, any value will do

//PM_AIR
//G_AIR
//PM_FOG
//G_FOG
//乱七八糟的相位函数参数，自己看着调吧我放弃解释了
//mess of phase function’s values, trial them as you like, I give up explaining

//RO
//大气散射衰减系数，除非需要艺术化效果通常不应更改
//atmospheric scattering transmittance, usually should not be modify unless for aesthetic effect

//HR
//瑞利散射放缩高度，单位为km
//Rayleigh scattering scaling height, in km

//HM
//米散射放缩高度，单位为km
//Mie scattering scaling height, in km

//EARTH_R
//地球海平面所在半径，用于大气层建模，单位为km
//sea surface’s location on Earth’s radius, for atmospheric modeling, in km

//EARTH_r
//地球实际地面的半径，用于大气层建模，单位为km
//radius of Earth’s actual surface, for atmospheric modeling, in km
//应比海平面所在半径略小，并调整到天际线分割尽量不明显
//should slightly smaller than EARTH_R, adjust to minimize the parting of skyline

//SUN_RISE_Y
//昼夜切换时的太阳高度，应调整至日月过渡尽量平滑
//Sun’s height when dusk and dawn, adjust to smoothen the transition between Sun and Moon

//EARTH_SHADOW
//地球遮挡
//Earth obscure

//LIGHT_STYLE END

#if CLOUD_TYPE == 1
#define CLOUD_COVERAGE 0.0
#define CLOUD_LM NaN
#define CLOUD_SPEED NaN
#define PM_CLOUD NaN
#define G_CLOUD NaN
#define CLOUD_W NaN
#define CLOUD_H NaN
#define CLOUD_Y NaN
#define CLOSIZ NaN

#elif CLOUD_TYPE == 2
#define CLOUD_COVERAGE 0.18
#define CLOUD_LM NaN
#define CLOUD_SPEED vec2(0.02, 0.05)
#define PM_CLOUD NaN
#define G_CLOUD NaN
#define CLOUD_W (1.0)
#define CLOUD_H (1.0 / 3.0)
#define CLOUD_Y (3.0)
#define CLOSIZ vec3(CLOUD_W, CLOUD_H, CLOUD_W)

#elif CLOUD_TYPE == 3
#define CLOUD_COVERAGE 0.18
#define CLOUD_LM 4.0
#define CLOUD_SPEED vec2(0.02, 0.05)
#define PM_CLOUD vec4(0.5, 0.1, 0.3, 0.1)
#define G_CLOUD vec4(0.0, 0.8, 0.95, 0.98)
#define CLOUD_W (1.0)
#define CLOUD_H (1.0 / 3.0)
#define CLOUD_Y (3.0)
#define CLOSIZ vec3(CLOUD_W, CLOUD_H, CLOUD_W)

#endif

//CLOUD_COVERAGE
//云覆盖率，1.0为晴天
//Cloud coverage，1.0 for sunny

//CLOUD_LM
//云的浓度
//Attenuation coefficient of cloud to light

//CLOUD_SPEED
//云的速度，单位km/s
//Speed of cloud, in km / S

//PM_CLOUD
//G_CLOUD
//乱七八糟的相位函数参数，自己看着调吧我放弃解释了
//mess of phase function’s values, trial them as you like, I give up explaining

//CLOUD_W
//CLOUD_H
//CLOUD_Y
//云的宽度，单位km
//cloud width, in km
//云的厚度，单位km
//cloud thickness, in km
//云的底部所在的海拔，单位km
//altitude of the bottom of cloud, in km

//CLOSIZ
//云的尺寸
//cloud size

#if ALPHA_PBR_STYLE == 1
#define USE_NORMAL_MAP 0
#define NORMAL_MAP_FIX 1
#define NORMAL_MAP_STRENGTH 1.0
#define NORMAL_MAP_W 1.5
#define FLUORESCENCE 0.5
#define ROUGHNESS 1.0
#define ROUGHNESS_0 0.05
#define HARDCODE_MATEL 0.8
#define F0          vec3(0.040)
#define F0_LEAVES   vec3(0.020)
#define F0_WATER    vec3(0.040) //vec3(0.020)
#define F0_GLASS    vec3(0.035)
#define F0_DIAMOND  vec3(0.172)
#if NORMAL_MAP_FIX
#define TEXSIZW 16384.0
#define TEXSIZH 8192.0
#else
#define TEXSIZW 8192.0
#define TEXSIZH 8192.0
#endif

#endif

//USE_NORMAL_MAP
//1 使用自动生成的法线
//1 use auto generated normal
//0 禁用自动生成的法线
//0 ban use of auto generated normal

//NORMAL_MAP_FIX
//修复法线宽度不一致的问题
//fixing the issue of normals’ uneven width

//NORMAL_MAP_STRENGTH
//法线映射强度
//strength of normal mapping

//NORMAL_MAP_W
//法线映射宽度
//width of normal mapping

//FLUORESCENCE
//材质默认荧光强度
//Default fluorescence

//ROUGHNESS
//材质默认粗糙度
//Default roughness

//ROUGHNESS_0
//光滑表面反射阳光的粗糙度
//roughness of sunlight reflected by smooth surface

//HARDCODE_MATEL
//金属的F0在材质颜色和pbr硬编码颜色间插值
//metal’s F0 interpolation between colour of material and pbr hard coded colour

//F0
//硬编码常用材质F0，除非需要艺术化效果通常不应更改
//material F0 commonly use in hard coding, usually should not be modify unless for aesthetic effect
//F0 = ((n1-n2)/(n1+n2))^2, n(air) = 1.00029
