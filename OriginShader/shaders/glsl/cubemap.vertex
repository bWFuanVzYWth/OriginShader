#version 300 es
#pragma optimize(on)

#ifdef ORIGIN_SHADER

precision highp float;
precision highp int;

#include "shaderfunction.lin"

uniform mat4 WORLDVIEWPROJ;
uniform mat4 WORLD;
uniform mat4 WORLDVIEW;
uniform mat4 PROJ;
uniform vec4 CHUNK_ORIGIN_AND_SCALE;
#if TRY_MCPE_NETEASE
uniform vec4 EXTRA_VECTOR1;
uniform vec4 EXTRA_VECTOR2;
uniform vec4 EXTRA_VECTOR3;
uniform vec4 EXTRA_VECTOR4;
uniform vec4 SUN_DIR;
uniform vec4 WATER_TEXTURE_UV_RANGE;
uniform vec4 SKY_NEAR_COLOR;
uniform vec4 SKY_FAR_COLOR;
uniform vec4 RAIN_NEAR_COLOR;
uniform vec4 RAIN_FAR_COLOR;
uniform vec4 COLOR_MAPPING_PARAM;
#endif
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float TOTAL_REAL_WORLD_TIME;
uniform sampler2D TEXTURE_0;

in vec4 POSITION;
in vec2 TEXCOORD_0;

flat out vec3 campos;
flat out vec3 clocampos;
flat out vec3 L;
flat out vec3 orisunlig;
flat out vec3 closunlig;
flat out vec3 closkylum;
flat out float isday;
centroid out vec2 uv;
out vec4 skypos;

void main() {
	campos = vec3(0.0, EARTH_R + ELEVATION, 0.0);
	clocampos = vec3(0.0, EARTH_R + ELEVATION + CLOUD_Y, 0.0);

#if TRY_MCPE_NETEASE
	mat3 M_time = mat3(1.0);
	M_time[0] = SUN_DIR.w > 0.5 ? SUN_DIR.xyz : -SUN_DIR.xyz;
	M_time[1] = cross(M_time[2], M_time[0]);

	mat3 M_sun = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(LATITUDE), sin(LATITUDE)), vec3(0.0, -sin(LATITUDE), cos(LATITUDE)));

	mat3 M_sky = M_sun * M_time;

	L = M_sky[0];
	bool day = L.y > SUN_RISE_Y;
	L = day ? L : -L;
	L.x += 0.00001; //fix cloud turn black at daytime 6000
	L = normalize(L);

	isday = float(day);

	orisunlig = day ? SUNLIG : MOOLIG;
	closunlig = getsunlig(clocampos, orisunlig, L);
#else
	float t = fogtime(FOG_COLOR);

	mat3 M_time = mat3(vec3(cos(t), sin(t), 0.0), vec3(-sin(t), cos(t), 0.0), vec3(0.0, 0.0, 1.0));
	mat3 M_sun = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(LATITUDE), sin(LATITUDE)), vec3(0.0, -sin(LATITUDE), cos(LATITUDE)));

	mat3 M_sky = M_sun * M_time;

	L = M_sky[0];
	bool day = L.y > SUN_RISE_Y;
	L = day ? L : -L;
	L.x += 0.00001; //fix cloud turn black at daytime 6000
	L = normalize(L);

	isday = float(day);

	orisunlig = day ? SUNLIG : MOOLIG;
	closunlig = getsunlig(clocampos, orisunlig, L);

#endif

	closkylum = physicsky(vec3(0.0), clocampos, vec3(0.0, 0.8, 0.6), orisunlig, L);

	vec4 inpos = POSITION;

	//银河系，实际上是天空盒的旋转矩阵
	const mat3 M_mkw_x = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(MILKY_WAY_DEC_X), sin(MILKY_WAY_DEC_X)), vec3(0.0, -sin(MILKY_WAY_DEC_X), cos(MILKY_WAY_DEC_X)));
	const mat3 M_mkw_y = mat3(vec3(cos(MILKY_WAY_DEC_Y), 0.0, sin(MILKY_WAY_DEC_Y)), vec3(0.0, 1.0, 0.0), vec3(-sin(MILKY_WAY_DEC_Y), 0.0, cos(MILKY_WAY_DEC_Y)));
	const mat3 M_mkw_z = mat3(vec3(cos(MILKY_WAY_DEC_Z), sin(MILKY_WAY_DEC_Z), 0.0), vec3(-sin(MILKY_WAY_DEC_Z), cos(MILKY_WAY_DEC_Z), 0.0), vec3(0.0, 0.0, 1.0));
	const mat3 M_mkw = M_mkw_z * M_mkw_y * M_mkw_x;

	inpos.xyz = M_mkw * inpos.xyz;
	inpos.xyz = transpose(M_time) * inpos.xyz;
	inpos.xyz = M_sun * inpos.xyz;

	//fuck mojang
	inpos.y += 0.128; //don't change
	//fuck mojang again

	skypos = WORLD * inpos;
	gl_Position = WORLDVIEWPROJ * inpos;

	uv = TEXCOORD_0;
}

#endif //ORIGIN_SHADER
